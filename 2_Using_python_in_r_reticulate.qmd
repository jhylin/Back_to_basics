---
title: "Using Python in R - reticulate"
author: Jennifer HY Lin
date: 2025-10-25
draft: true
categories: 
    - Notes
format: html
---

##### **Background**

The main goal here is to try using Python and R concurrently in a notebook setting. Both programming languages have their weaknesses and strengths, and also differences and similarities. By combining them together, we can leverage R's strong statistical packages and Python's well-developed and maintained machine learning packages in some of our scientific research work.

I've tried using rpy2 to call R in Python previously and... it's not as easy as I thought... it sort of "half worked" so far, and I've left it as how it is until I get more time later to figure out how to fix it (or rather leave it if reticulate is much easier to use instead). 

For [reticulate package](https://rstudio.github.io/reticulate/index.html), the concept is reversed where we are trying to call Python in a R environment as it is a R-based package. So I've changed the title of this post to reflect this.

<br>

##### **Setting up notebook environment**

Steps I've taken:

Initial preparation - this notebook has been created using a virtual environment from uv, with the associated repository created using the uv project management structure as well. This step has been done prior to the executions of the following steps.

1. Install R with version at least 4.0 or above, and Python with version at least 3.7 or above ([reference](https://rviews.rstudio.com/2022/05/25/calling-r-from-python-with-rpy2/)). The versions of R and Python used here are suggested by the [old reference post about using rpy2 from 2022](https://rviews.rstudio.com/2022/05/25/calling-r-from-python-with-rpy2/). So far when I've tried it with reticulate package, it works so I'll leave them as how they are now.

2. Install R's language server. All R packages are to be installed via R console/terminal (not in notebooks, otherwise you may run into some error messages).

```{{r}}
install.packages("languageserver")
```

3. Install [reticulate package](https://rstudio.github.io/reticulate/) as shown in its [GitHub repository](https://github.com/rstudio/reticulate/).

4. Install rmarkdown package so we can preview .qmd docs. Some further set-ups may be required if using VS Code, e.g. go to "Settings" of VS Code -> under "User" -> Text Editor -> Files -> Associations -> add *.Rmd as "Item" and rmd as "Value"

5. Install R extension for VS Code (because I'm using VS Code but I think there is a very similar IDE called Positron created by Posit which may be easier to use for this case).

6. Install shiny package (I was reminded to do this while installing these packages... unsure of its direct relevance to my goal here but it doesn't hurt so I've done it)

Quarto markdown documents (.qmd) and R markdown documents (.rmd) are interchangeable as .qmd are based on .rmd so I've done a little trial using reticulate package first in .rmd which worked, and then decided to switch to .qmd so that this piece of work may be published on my blog later. The convenient thing here is that you can literally just change the file name ending with .rmd to .qmd to convert a .rmd file into a .qmd file. 

<br>

##### **Import libraries**

```{r}
# Show R version used
R.version.string
```

```{r}
# Import R packages/libraries in R
library(reticulate)

# Import Python packages/libraries in R 
# This step is required to install Python packages in R while using reticulate
# Reference: https://rstudio.github.io/reticulate/articles/python_packages.html

# Import pandas
py_require("pandas")    
pd <- import("pandas")

# Import plotnine
py_require( "plotnine")
p9 <- import("plotnine")
```

```{r}
# Show Python version used
py_config()
```

Below is a small test snippet of running Python code in R.

```{r}
# Code snippet below borrowed from https://www.geeksforgeeks.org/r-language/integrating-python-code-with-r/
# Running Python code in R
py_run_string("x = 10")
py_run_string("y = 5")
py_run_string("z = x + y")

# Access the Python variable in R
z <- py$z  
print(z)
```

I have a feeling now that it's easier to use reticulate package for the purpose of combining Python and R in one place.

<br>

##### **Plotting in R using ggplot2 and plotnine**

Next example is using Python code to read a dataframe using Pandas.

```{{python}}
## This is the code for read_df.py
# import pandas
import pandas as pd

def reading_df(file):
    # Reading a df (using one of my old cleaned datasets from a while ago)
    df = pd.read_csv(file)
    df = df.rename(columns={"QED Weighted": "QED", "Polar Surface Area": "PSA"})
    
    return df
```

<br>

###### **ggplot2**

Then I'm using R's well-known plotting package, [ggplot2](https://ggplot2.tidyverse.org/), to plot a scatter plot as an example shown below.

```{r}
# Read data using read_df.py
source_python("read_df.py")
df <- reading_df("df_ml.csv")

library(ggplot2)

ggplot(df, aes(PSA, QED, colour = Max_Phase)) + 
    geom_point() + 
    geom_jitter()
```

<br>

###### **plotnine**

An equivalent Python plotting library based on ggplot2 is [plotnine](https://plotnine.org/). The same plot is shown below using plotnine with Python code.

```{python}
from read_df import reading_df
df_data = reading_df("df_ml.csv")

import plotnine as p9
# from plotnine import *
# from plotnine import ggplot, aes, geom_point

plot = (p9.ggplot(data=df_data) + p9.geom_point(mapping=p9.aes("PSA", "QED", color = "Max_Phase")))

plot.show()
```


